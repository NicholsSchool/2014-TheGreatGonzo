// RobotBuilder Version: 1.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
#include "IntakeArm.h"
#include "../Robotmap.h"
IntakeArm::IntakeArm() : Subsystem("IntakeArm") {
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	rollerMotor = RobotMap::intakeArmRollerMotor;
	fullyRetractedLimitSwitch = RobotMap::intakeArmFullyRetractedLimitSwitch;
	safeToShootLimitSwitch = RobotMap::intakeArmSafeToShootLimitSwitch;
	intakeArmMotorOne = RobotMap::intakeArmIntakeArmMotorOne;
	intakeArmMotorTwo = RobotMap::intakeArmIntakeArmMotorTwo;
	winchMotorController = RobotMap::intakeArmWinchMotorController;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
}
    
void IntakeArm::InitDefaultCommand() {
	// Set the default command for a subsystem here.
	//SetDefaultCommand(new MySpecialCommand());
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
}
// Put methods for controlling this subsystem
// here. Call these from Commands.
void IntakeArm::powerWinchMotors(double speedValue) {
	winchMotorController->TankDrive(speedValue, speedValue);
}
void IntakeArm::stopWinchMotors() {
	winchMotorController->TankDrive(0.0, 0.0);
}
//
// Roller Motor In
void IntakeArm::rollerMotorIn(double speedValue) {
	rollerMotor->Set(speedValue);
}
//
// Roller Motor Out
void IntakeArm::rollerMotorOut(double speedValue) {
	rollerMotor->Set(-speedValue);
}
//
// Stop Roller Motor
void IntakeArm::rollerMotorStop() {
	rollerMotor->Set(0.0);
}
