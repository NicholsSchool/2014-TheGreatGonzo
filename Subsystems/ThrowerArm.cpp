// RobotBuilder Version: 1.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
#include "ThrowerArm.h"
#include "../Robotmap.h"
ThrowerArm::ThrowerArm() : Subsystem("ThrowerArm") {
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	throwerMotorOne = RobotMap::throwerArmThrowerMotorOne;
	throwerMotorTwo = RobotMap::throwerArmThrowerMotorTwo;
	throwerMotorThree = RobotMap::throwerArmThrowerMotorThree;
	fullyRetractedLimitSwitch = RobotMap::throwerArmFullyRetractedLimitSwitch;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
}
    
void ThrowerArm::InitDefaultCommand() {
	// Set the default command for a subsystem here.
	//SetDefaultCommand(new MySpecialCommand());
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
}
// Put methods for controlling this subsystem
// here. Call these from Commands.
//
// @note The use of indicator switches or a potentiometer could help here
//
// Extend Thrower Arm
// This method is used to launch the ball.
// @example Robot::throwerArm->extendThrowerArm(0.5, 0.1);
// @param power double
// @param delay double
void ThrowerArm::extendThrowerArm(double power, double delay){
	throwerMotorOne->Set(power);
	throwerMotorTwo->Set(power);
	throwerMotorThree->Set(power);
	Wait(delay);
	throwerMotorOne->Set(0.0);
	throwerMotorTwo->Set(0.0);
	throwerMotorThree->Set(0.0);
}
//
// Retract Thrower Arm
// Used to retract the thrower after launch
// @example Robot::throwerArm->tretractThrowerArm(0.5, 0.1);
// @param power double
// @param delay double
void ThrowerArm::retractThrowerArm(double power, double delay){
	throwerMotorOne->Set(-power);
	throwerMotorTwo->Set(-power);
	throwerMotorThree->Set(-power);
	Wait(delay);
	throwerMotorOne->Set(0.0);
	throwerMotorTwo->Set(0.0);
	throwerMotorThree->Set(0.0);
}
