// RobotBuilder Version: 1.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
#include "RobotMap.h"
#include "LiveWindow/LiveWindow.h"
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=ALLOCATION
SpeedController* RobotMap::theDriveTrainLeftDriveMotorOne = NULL;
SpeedController* RobotMap::theDriveTrainLeftDriveMotorTwo = NULL;
SpeedController* RobotMap::theDriveTrainRightDriveMotorOne = NULL;
SpeedController* RobotMap::theDriveTrainRightDriveMotorTwo = NULL;
RobotDrive* RobotMap::theDriveTrainRobotDriveController = NULL;
Encoder* RobotMap::theDriveTrainLeftDriveEncoder = NULL;
Encoder* RobotMap::theDriveTrainRightDriveEncoder = NULL;
SpeedController* RobotMap::throwerArmThrowerMotorOne = NULL;
SpeedController* RobotMap::throwerArmThrowerMotorTwo = NULL;
SpeedController* RobotMap::throwerArmThrowerMotorThree = NULL;
DigitalInput* RobotMap::throwerArmThrowerArmUpLimitSwitch = NULL;
DigitalInput* RobotMap::throwerArmThrowerArmDownLimitSwitch = NULL;
SpeedController* RobotMap::intakeArmIntakeArmMotor = NULL;
DigitalInput* RobotMap::intakeArmSafeToShootLimitSwitchA = NULL;
DigitalInput* RobotMap::intakeArmSafeToShootLimitSwitchB = NULL;
DigitalInput* RobotMap::intakeArmFullyRetractedLimitSwitchA = NULL;
DigitalInput* RobotMap::intakeArmFullyRetractedLimitSwitchB = NULL;
SpeedController* RobotMap::rollerMotorRollerMotorController = NULL;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=ALLOCATION
void RobotMap::init() {
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
	LiveWindow* lw = LiveWindow::GetInstance();
	theDriveTrainLeftDriveMotorOne = new Talon(1, 1);
	lw->AddActuator("TheDriveTrain", "LeftDriveMotorOne", (Talon*) theDriveTrainLeftDriveMotorOne);
	
	theDriveTrainLeftDriveMotorTwo = new Talon(1, 2);
	lw->AddActuator("TheDriveTrain", "LeftDriveMotorTwo", (Talon*) theDriveTrainLeftDriveMotorTwo);
	
	theDriveTrainRightDriveMotorOne = new Talon(1, 3);
	lw->AddActuator("TheDriveTrain", "RightDriveMotorOne", (Talon*) theDriveTrainRightDriveMotorOne);
	
	theDriveTrainRightDriveMotorTwo = new Talon(1, 4);
	lw->AddActuator("TheDriveTrain", "RightDriveMotorTwo", (Talon*) theDriveTrainRightDriveMotorTwo);
	
	theDriveTrainRobotDriveController = new RobotDrive(theDriveTrainLeftDriveMotorOne, theDriveTrainLeftDriveMotorTwo,
              theDriveTrainRightDriveMotorOne, theDriveTrainRightDriveMotorTwo);
	
	theDriveTrainRobotDriveController->SetSafetyEnabled(true);
        theDriveTrainRobotDriveController->SetExpiration(0.1);
        theDriveTrainRobotDriveController->SetSensitivity(0.5);
        theDriveTrainRobotDriveController->SetMaxOutput(1.0);
        theDriveTrainRobotDriveController->SetInvertedMotor(RobotDrive::kFrontLeftMotor, true);
        theDriveTrainRobotDriveController->SetInvertedMotor(RobotDrive::kRearLeftMotor, true);
        theDriveTrainRobotDriveController->SetInvertedMotor(RobotDrive::kFrontRightMotor, true);
        theDriveTrainRobotDriveController->SetInvertedMotor(RobotDrive::kRearRightMotor, true);
	theDriveTrainLeftDriveEncoder = new Encoder(1, 12, 1, 13, false, Encoder::k4X);
	lw->AddSensor("TheDriveTrain", "LeftDriveEncoder", theDriveTrainLeftDriveEncoder);
	theDriveTrainLeftDriveEncoder->SetDistancePerPulse(1.0);
        theDriveTrainLeftDriveEncoder->SetPIDSourceParameter(Encoder::kDistance);
        theDriveTrainLeftDriveEncoder->Start();
	theDriveTrainRightDriveEncoder = new Encoder(1, 10, 1, 11, true, Encoder::k4X);
	lw->AddSensor("TheDriveTrain", "RightDriveEncoder", theDriveTrainRightDriveEncoder);
	theDriveTrainRightDriveEncoder->SetDistancePerPulse(1.0);
        theDriveTrainRightDriveEncoder->SetPIDSourceParameter(Encoder::kDistance);
        theDriveTrainRightDriveEncoder->Start();
	throwerArmThrowerMotorOne = new Talon(1, 5);
	lw->AddActuator("ThrowerArm", "ThrowerMotorOne", (Talon*) throwerArmThrowerMotorOne);
	
	throwerArmThrowerMotorTwo = new Talon(1, 6);
	lw->AddActuator("ThrowerArm", "ThrowerMotorTwo", (Talon*) throwerArmThrowerMotorTwo);
	
	throwerArmThrowerMotorThree = new Talon(1, 7);
	lw->AddActuator("ThrowerArm", "ThrowerMotorThree", (Talon*) throwerArmThrowerMotorThree);
	
	throwerArmThrowerArmUpLimitSwitch = new DigitalInput(1, 5);
	lw->AddSensor("ThrowerArm", "ThrowerArmUpLimitSwitch", throwerArmThrowerArmUpLimitSwitch);
	
	throwerArmThrowerArmDownLimitSwitch = new DigitalInput(1, 6);
	lw->AddSensor("ThrowerArm", "ThrowerArmDownLimitSwitch", throwerArmThrowerArmDownLimitSwitch);
	
	intakeArmIntakeArmMotor = new Talon(1, 8);
	lw->AddActuator("IntakeArm", "IntakeArmMotor", (Talon*) intakeArmIntakeArmMotor);
	
	intakeArmSafeToShootLimitSwitchA = new DigitalInput(1, 3);
	lw->AddSensor("IntakeArm", "SafeToShootLimitSwitchA", intakeArmSafeToShootLimitSwitchA);
	
	intakeArmSafeToShootLimitSwitchB = new DigitalInput(1, 4);
	lw->AddSensor("IntakeArm", "SafeToShootLimitSwitchB", intakeArmSafeToShootLimitSwitchB);
	
	intakeArmFullyRetractedLimitSwitchA = new DigitalInput(1, 1);
	lw->AddSensor("IntakeArm", "FullyRetractedLimitSwitchA", intakeArmFullyRetractedLimitSwitchA);
	
	intakeArmFullyRetractedLimitSwitchB = new DigitalInput(1, 2);
	lw->AddSensor("IntakeArm", "FullyRetractedLimitSwitchB", intakeArmFullyRetractedLimitSwitchB);
	
	rollerMotorRollerMotorController = new Talon(1, 9);
	lw->AddActuator("RollerMotor", "RollerMotorController", (Talon*) rollerMotorRollerMotorController);
	
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
}
