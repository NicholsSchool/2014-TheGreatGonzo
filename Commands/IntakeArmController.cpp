// RobotBuilder Version: 1.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.


#include "IntakeArmController.h"

IntakeArmController::IntakeArmController() {
	// Use requires() here to declare subsystem dependencies
	// eg. requires(chassis);
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	Requires(Robot::intakeArm);
	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
}

// Called just before this Command runs the first time
void IntakeArmController::Initialize() {
	
}

// Called repeatedly when this Command is scheduled to run
void IntakeArmController::Execute() {
	// instantiate and assign arm controller joystick value
	Joystick *arm_control_joystick = Robot::oi->getArmControllerJoystick();
	// pass the current value for the Y axis to the power winch motor command
	Robot::intakeArm->powerWinchMotor(arm_control_joystick->GetY());
}

// Make this return true when this Command no longer needs to run execute()
bool IntakeArmController::IsFinished() {
	return false;
}

// Called once after isFinished returns true
void IntakeArmController::End() {
	// This may never fire. But good practice to stop motor here.
	Robot::intakeArm->stopWinchMotor();
}

// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void IntakeArmController::Interrupted() {
	// Stop the winch motor when this method is called.
	Robot::intakeArm->stopWinchMotor();
}
